{
  "parser": "@typescript-eslint/parser",
  "env": {
    "browser": true,
    "jest/globals": true
  },
  "plugins": ["@typescript-eslint", "react-hooks", "jest", "prettier"],
  "extends": [
    "airbnb",
    "plugin:@typescript-eslint/recommended",
    "plugin:import/typescript",
    "plugin:prettier/recommended",
    "prettier/@typescript-eslint"
  ],
  "rules": {
    "no-shadow": "off", //TODO: it's buggy at the moment, firing for TS types that are clearly unique in the whole project
    /**
     * @description rules of eslint official
     */
    /**
     * @bug https://github.com/benmosher/eslint-plugin-import/issues/1282
     * "import/named" temporary disable.
     */
    "import/named": "off",
    /**
     * @bug?
     * "import/export" temporary disable.
     */
    "import/export": "off",
    "import/prefer-default-export": "off", // Allow single Named-export
    "import/order": ["error", { "newlines-between": "always" }],
    "arrow-body-style": ["error", "as-needed"],
    "no-unused-expressions": [
      "warn",
      {
        "allowShortCircuit": true,
        "allowTernary": true
      }
    ], // https://eslint.org/docs/rules/no-unused-expressions

    /**
     * @description rules of @typescript-eslint
     */
    "@typescript-eslint/prefer-interface": "off", // also want to use "type"
    "@typescript-eslint/explicit-function-return-type": "off", // annoying to force return type

    /**
     * @description rules of eslint-plugin-react
     */
    "react/jsx-filename-extension": [
      "warn",
      {
        "extensions": [".jsx", ".tsx"]
      }
    ], // also want to use with ".tsx"
    "react/prop-types": "off", // Is this incompatible with TS props type?
    "react/jsx-props-no-spreading": "off",
    "react/jsx-no-bind": ["error", {}],
    /**
     * @description rules of eslint-plugin-react-hooks
     */
    "react-hooks/rules-of-hooks": "error",
    /**
     * @description rules for eslint-plugin-jsx-a11y
     */
    "jsx-a11y/click-events-have-key-events": "warn",
    "jsx-a11y/no-noninteractive-element-interactions": "warn",
    "react/jsx-one-expression-per-line": "off",
    "jsx-a11y/anchor-is-valid": "off", // We're using next.js, no need for hrefs in <a> tags, only in <Link>s
    "import/extensions": [
      "error",
      "ignorePackages",
      { "ts": "never", "tsx": "never", "js": "never" }
    ],
    // following 2 lines are beccause of this https://github.com/typescript-eslint/typescript-eslint/issues/2540
    "no-use-before-define": "off",
    "@typescript-eslint/no-use-before-define" : "error",
    "@typescript-eslint/ban-ts-comment" : "warn",
    "no-underscore-dangle": "warn", // apollo codegen uses __ for typenames that we are using for validation
    "no-restricted-syntax": "off", // stupid rule, iterators/generators are no longer transpiled and are faster that HO array functions
    "no-await-in-loop": "off", // can be used to unblock the UI for long iterating loops
    "@typescript-eslint/explicit-module-boundary-types": "off", // ts compliler can guess the type from the return
    "no-plusplus": "off", // a lot of places we rely on imperative code because it's faster
    "no-continue": "off" // a lot of places we rely on imperative code because it's faster
  }
}
